# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type RoleDetail {
  id: String!
  name: String!
  color: Float!
  imageUrl: String!
}

type User {
  id: String!
  discordId: String!
  username: String!
  avatar: String!
  discriminator: String!
  roles: [String!]!
}

type UserDetail {
  id: String!
  discordId: String!
  username: String!
  avatar: String!
  discriminator: String!
  avatarUrl: String!
  roles: [RoleDetail!]!
}

type JwtModel {
  accessToken: String!
  refreshToken: String!
}

type PageInfo {
  currentPage: Float!
  totalPages: Float!
  total: Float!
  hasNextPage: Boolean!
}

type TestCase {
  id: Float!
  args: JSON!
  expectedOutput: String!
  isSecret: Boolean!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type CodeChallenge {
  id: String!
  title: String!
  mainCode: String!
  startedCode: String!
  lang: ProgrammingLang!
  difficult: Difficult!
  testCases: [TestCase!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ProgrammingLang {
  Javascript
  Typescript
  Python
}

enum Difficult {
  Easy
  Medium
  Hard
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginatedChallenges {
  data: [CodeChallenge!]!
  pageInfo: PageInfo
}

type Submission {
  id: String!
  solutionCode: String!
  runtime: Float!
  status: String!
  codeChallenge: CodeChallenge!
  user: UserDetail!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type InputExecutionResult {
  testCase: TestCase!
  output: String!
  executionTime: Float!
  timeFormat: String!
}

type SubmissionResult {
  submission: Submission!
  inputResults: [InputExecutionResult!]!
}

type EventSchedule {
  uniqueDate: DateTime!
  periocity: Periodicity!
  monday: Boolean!
  tuesday: Boolean!
  wednesday: Boolean!
  thursday: Boolean!
  friday: Boolean!
  saturday: Boolean!
  sunday: Boolean!
  startTime: DateTime!
  endTime: DateTime
}

enum Periodicity {
  DAILY
  WEEKLY
  MONTHY
  ONCE_TIME
}

type Event {
  id: String!
  name: String!
  description: String!
  creators: [User!]!
  schedule: EventSchedule!
}

type PaginatedEvents {
  data: [Event!]!
  pageInfo: PageInfo
}

type Query {
  findProfile: UserDetail!
  events(search: String!, status: Status!, page: Int!, perPage: Int!): PaginatedEvents!
  getCodeChallenge(id: String!): CodeChallenge!
  findCodeChallenges(search: String!, lang: ProgrammingLang!, page: Int!, perPage: Int!, difficult: Difficult!): PaginatedChallenges!
  getUserSubmission(submissionId: String!): Submission!
  getUserSubmissions: [Submission!]!
}

enum Status {
  PENDING
  READY
  REJECTED
}

type Mutation {
  registerEvent(newEvent: RegisterEventInput!): Event!
  updateEvent(event: UpdateEventInput!): Event!
  updateSchedule(id: Float!, schedule: UpdateEventScheduleInput!): EventSchedule!
  createCodeChallenge(newCodeChallenge: CreateCodeChallengeInput!): CodeChallenge!
  createTestCase(testCase: CreateTestCaseInput!): CodeChallenge!
  createUserSubmission(submission: SubmissionInput!): SubmissionResult!
  updateUserSubmission(submissionId: String!, submission: SubmissionInput!): SubmissionResult!
  refreshToken: JwtModel!
}

input RegisterEventInput {
  event: CreateEventInput!
  schedule: CreateEventScheduleInput!
  creators: [String!]!
}

input CreateEventInput {
  name: String!
  description: String
  link: String!
  type: EventType!
}

enum EventType {
  COURSE
}

input CreateEventScheduleInput {
  uniqueDate: DateTime!
  periocity: Periodicity!
  monday: Boolean! = false
  tuesday: Boolean! = false
  wednesday: Boolean! = false
  thursday: Boolean! = false
  friday: Boolean! = false
  saturday: Boolean! = false
  sunday: Boolean! = false
  startTime: DateTime!
  endTime: DateTime
}

input UpdateEventInput {
  name: String
  description: String
  link: String
  type: EventType
  id: String!
  status: Status!
}

input UpdateEventScheduleInput {
  uniqueDate: DateTime
  periocity: Periodicity
  monday: Boolean = false
  tuesday: Boolean = false
  wednesday: Boolean = false
  thursday: Boolean = false
  friday: Boolean = false
  saturday: Boolean = false
  sunday: Boolean = false
  startTime: DateTime
  endTime: DateTime
}

input CreateCodeChallengeInput {
  title: String!
  description: String!
  difficult: Difficult!
}

input CreateTestCaseInput {
  args: JSON!
  expectedOutput: String!
  codeChallengeId: String!
  isSecret: Boolean!
}

input SubmissionInput {
  lang: ProgrammingLang!
  solutionCode: String!
  challengeId: String!
}