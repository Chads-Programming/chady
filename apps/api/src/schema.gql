# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type RoleDetail {
  id: String!
  name: String!
  color: Float!
  imageUrl: String!
}

type SimpleUser {
  id: String!
  discordId: String!
  username: String!
}

type UserDetail {
  id: String!
  discordId: String!
  username: String!
  avatar: String!
  discriminator: String!
  avatarUrl: String!
  roles: [RoleDetail!]!
}

type JwtModel {
  accessToken: String!
  refreshToken: String!
}

type UserScoreModel {
  user: UserDetail!
  userId: String!
  totalScore: Float!
}

type SubmissionInfo {
  runtime: Float!
  lang: ProgrammingLang!
  user: SimpleUser!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ProgrammingLang {
  Javascript
  Typescript
  Python
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CodeLangChallengeDetail {
  id: Float!
  mainCode: String!
  startedCode: String!
  codeChallengeId: String!
  lang: ProgrammingLang!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PageInfo {
  currentPage: Float!
  totalPages: Float!
  total: Float!
  hasNextPage: Boolean!
}

type TestCaseModel {
  id: Float!
  args: String!
  expectedOutput: String!
  isSecret: Boolean!
}

type CodeChallenge {
  id: String!
  title: String!
  description: String!
  startedCode: String!
  difficult: Difficult!
  langDetails: [CodeLangChallengeDetail!]!
  testCases: [TestCaseModel!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum Difficult {
  Easy
  Medium
  Hard
}

type PaginatedChallenges {
  data: [CodeChallenge!]!
  pageInfo: PageInfo
}

type InputExecutionResult {
  testCase: TestCaseModel!
  output: String!
  executionTime: Float!
  timeFormat: String!
  isSuccess: Boolean!
}

type Submission {
  id: String!
  solutionCode: String!
  runtime: Float!
  lang: ProgrammingLang!
  score: Float!
  status: String!
  codeChallenge: CodeChallenge!
  user: UserDetail!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RegisteredSubmission {
  id: String!
  solutionCode: String!
  runtime: Float!
  lang: ProgrammingLang!
  score: Float!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SubmissionResult {
  submission: RegisteredSubmission!
  inputResults: [InputExecutionResult!]!
  status: SubmissionStatus!
}

enum SubmissionStatus {
  Success
  Pending
  Failed
}

type Query {
  findProfile: UserDetail!
  getCodeChallenge(id: String!): CodeChallenge!
  findCodeChallenges(search: String, lang: ProgrammingLang, page: Int, perPage: Int, difficult: Difficult): PaginatedChallenges!
  getUserSubmission(codeChallengeId: String!, programmingLang: ProgrammingLang!): Submission!
  getUserSubmissions: [Submission!]!
  findPersonalScore: Float!
  getSubmissionsInfoByChallenge(codeChallengeId: String!): [SubmissionInfo!]!
  findSubmissionsLeaderboard: [UserScoreModel!]!
}

type Mutation {
  createCodeChallenge(newCodeChallenge: CreateCodeChallengeInput!): CodeChallenge!
  createTestCase(testCase: CreateTestCaseInput!): CodeChallenge!
  submitUserSolution(submission: SubmissionInput!): SubmissionResult!
  refreshToken: JwtModel!
}

input CreateCodeChallengeInput {
  title: String!
  description: String!
  difficult: Difficult!
}

input CreateTestCaseInput {
  args: String!
  expectedOutput: String!
  codeChallengeId: String!
  isSecret: Boolean!
}

input SubmissionInput {
  lang: ProgrammingLang!
  solutionCode: String!
  challengeId: String!
}