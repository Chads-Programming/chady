// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @default(cuid())
  username      String
  avatar        String
  discordId     String
  discriminator String @unique

  accessToken  String
  refreshToken String

  roles             String[]
  EventCreators     EventCreators[]
  UserCodeChallenge UserCodeChallenge[]

  @@unique([discordId, username])
}

enum EventType {
  COURSE
}

enum Periodicity {
  DAILY
  WEEKLY
  MONTHY
  ONCE_TIME
}

enum Status {
  PENDING
  READY
  REJECTED
}

model EventSchedule {
  id         Int         @id @default(autoincrement())
  uniqueDate DateTime
  periocity  Periodicity

  monday    Boolean @default(false)
  tuesday   Boolean @default(false)
  wednesday Boolean @default(false)
  thursday  Boolean @default(false)
  friday    Boolean @default(false)
  saturday  Boolean @default(false)
  sunday    Boolean @default(false)

  startTime DateTime
  endTime   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event?
}

model Event {
  id              String          @id @default(uuid())
  type            EventType
  status          Status
  name            String
  description     String
  link            String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  schedule        EventSchedule   @relation(fields: [eventScheduleId], references: [id])
  eventScheduleId Int             @unique
  EventCreators   EventCreators[]
}

model EventCreators {
  id      Int    @id @default(autoincrement())
  eventId String
  userId  String

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

enum ProgrammingLang {
  Javascript
  Typescript
}

model CodeChallenge {
  id          String          @id @default(uuid())
  title       String
  description String
  startedCode String
  lang        ProgrammingLang
  TestCase    TestCase[]

  deletedAt         DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  UserCodeChallenge UserCodeChallenge[]
}

model TestCase {
  id              Int     @id @default(autoincrement())
  args            Json
  expectedOutput  String
  codeChallengeId String
  isSecret        Boolean @default(false)

  CodeChallenge CodeChallenge @relation(fields: [codeChallengeId], references: [id])

  deletedAt DateTime?
}

model UserCodeChallenge {
  id           String  @id @default(uuid())
  solutionCode String
  runTime      Decimal

  codeChallengeId String
  codeChallenge   CodeChallenge @relation(fields: [codeChallengeId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
