schema {
  query: Query
  mutation: Mutation
}

type CodeChallenge {
  createdAt: DateTime!
  description: String!
  difficult: Difficult!
  id: String!
  langDetails: [CodeLangChallengeDetail!]!
  startedCode: String!
  testCases: [TestCaseModel!]!
  title: String!
  updatedAt: DateTime!
}

type CodeLangChallengeDetail {
  codeChallengeId: String!
  createdAt: DateTime!
  id: Float!
  lang: ProgrammingLang!
  mainCode: String!
  startedCode: String!
  updatedAt: DateTime!
}

input CreateCodeChallengeInput {
  description: String!
  difficult: Difficult!
  title: String!
}

input CreateTestCaseInput {
  args: String!
  codeChallengeId: String!
  expectedOutput: String!
  isSecret: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Difficult {
  Easy
  Hard
  Medium
}

type InputExecutionResult {
  executionTime: Float!
  isSuccess: Boolean!
  output: String!
  testCase: TestCaseModel!
  timeFormat: String!
}

type JwtModel {
  accessToken: String!
  refreshToken: String!
}

type Mutation {
  createCodeChallenge(newCodeChallenge: CreateCodeChallengeInput!): CodeChallenge!
  createTestCase(testCase: CreateTestCaseInput!): CodeChallenge!
  refreshToken: JwtModel!
  submitUserSolution(submission: SubmissionInput!): SubmissionResult!
}

type PageInfo {
  currentPage: Float!
  hasNextPage: Boolean!
  total: Float!
  totalPages: Float!
}

type PaginatedChallenges {
  data: [CodeChallenge!]!
  pageInfo: PageInfo
}

enum ProgrammingLang {
  Javascript
  Python
  Typescript
}

type Query {
  findCodeChallenges(difficult: Difficult, lang: ProgrammingLang, page: Int, perPage: Int, search: String): PaginatedChallenges!
  findPersonalScore: Float!
  findProfile: UserDetail!
  findSubmissionsLeaderboard: [UserScoreModel!]!
  getCodeChallenge(id: String!): CodeChallenge!
  getUserSubmission(codeChallengeId: String!, programmingLang: ProgrammingLang!): Submission!
  getUserSubmissions: [Submission!]!
}

type RegisteredSubmission {
  createdAt: DateTime!
  id: String!
  lang: ProgrammingLang!
  runtime: Float!
  score: Float!
  solutionCode: String!
  status: String!
  updatedAt: DateTime!
}

type RoleDetail {
  color: Float!
  id: String!
  imageUrl: String!
  name: String!
}

type Submission {
  codeChallenge: CodeChallenge!
  createdAt: DateTime!
  id: String!
  lang: ProgrammingLang!
  runtime: Float!
  score: Float!
  solutionCode: String!
  status: String!
  updatedAt: DateTime!
  user: UserDetail!
}

input SubmissionInput {
  challengeId: String!
  lang: ProgrammingLang!
  solutionCode: String!
}

type SubmissionResult {
  inputResults: [InputExecutionResult!]!
  status: SubmissionStatus!
  submission: RegisteredSubmission!
}

enum SubmissionStatus {
  Failed
  Pending
  Success
}

type TestCaseModel {
  args: String!
  expectedOutput: String!
  id: Float!
  isSecret: Boolean!
}

type UserDetail {
  avatar: String!
  avatarUrl: String!
  discordId: String!
  discriminator: String!
  id: String!
  roles: [RoleDetail!]!
  username: String!
}

type UserScoreModel {
  totalScore: Float!
  user: UserDetail!
  userId: String!
}